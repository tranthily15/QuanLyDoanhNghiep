@* @model List<QuanLyDoanhNghiep.Models.Notification>

<div class="notification-container">
    <div class="notification-header">
        <h5 class="notification-title">Thông báo</h5>
        <div class="notification-actions">
            <button class="btn btn-link mark-all-read">Đánh dấu đã đọc tất cả</button>
        </div>
    </div>

    <div class="notification-list">
        @if (Model != null && Model.Any())
        {
            foreach (var notification in Model)
            {
                <div class="notification-item @(notification.IsRead ? "read" : "unread")" data-id="@notification.NotificationID">
                  
                    <div class="notification-content">
                        <div class="notification-text">@notification.Message</div>
                        <div class="notification-time">@notification.CreatedAt.ToString("HH:mm dd/MM/yyyy")</div>
                    </div>
                    @if (!notification.IsRead)
                    {
                        <div class="notification-status">
                            <span class="unread-dot"></span>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="no-notifications">
                <i class="fas fa-bell-slash"></i>
                <p>Không có thông báo mới</p>
            </div>
        }
    </div>
</div>

<style>
.notification-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    width: 360px;
    max-height: 480px;
    overflow: hidden;
}

.notification-header {
    padding: 16px;
    border-bottom: 1px solid #e4e6eb;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.notification-title {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: #1c1e21;
}

.notification-actions .btn-link {
    color: #1877f2;
    text-decoration: none;
    font-size: 13px;
    padding: 0;
}

.notification-actions .btn-link:hover {
    text-decoration: underline;
}

.notification-list {
    max-height: 400px;
    overflow-y: auto;
}

.notification-item {
    padding: 12px 16px;
    display: flex;
    align-items: flex-start;
    gap: 12px;
    cursor: pointer;
    transition: background-color 0.2s;
    position: relative;
}

.notification-item:hover {
    background-color: #f2f2f2;
}

.notification-item.unread {
    background-color: #e7f3ff;
}

.notification-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #e4e6eb;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.notification-icon i {
    font-size: 18px;
    color: #1877f2;
}

.notification-content {
    flex: 1;
    min-width: 0;
}

.notification-text {
    color: #1c1e21;
    font-size: 14px;
    line-height: 1.4;
    margin-bottom: 4px;
}

.notification-time {
    color: #65676b;
    font-size: 12px;
}

.notification-status {
    position: absolute;
    top: 16px;
    right: 16px;
}

.unread-dot {
    width: 8px;
    height: 8px;
    background-color: #1877f2;
    border-radius: 50%;
    display: block;
}

.no-notifications {
    padding: 32px 16px;
    text-align: center;
    color: #65676b;
}

.no-notifications i {
    font-size: 24px;
    margin-bottom: 8px;
}

.no-notifications p {
    margin: 0;
    font-size: 14px;
}

/* Custom scrollbar */
.notification-list::-webkit-scrollbar {
    width: 6px;
}

.notification-list::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.notification-list::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
}

.notification-list::-webkit-scrollbar-thumb:hover {
    background: #555;
}
</style>

<script>
$(document).ready(function() {
    // Mark notification as read when clicked
    $('.notification-item').click(function() {
        var notificationId = $(this).data('id');
        var $item = $(this);
        
        $.post('/Notification/MarkAsRead', { id: notificationId }, function() {
            $item.removeClass('unread').addClass('read');
            $item.find('.notification-status').remove();
            updateNotificationCount();
        });
    });

    // Mark all as read
    $('.mark-all-read').click(function(e) {
        e.stopPropagation();
        
        $.post('/Notification/MarkAllAsRead', function() {
            $('.notification-item').removeClass('unread').addClass('read');
            $('.notification-status').remove();
            updateNotificationCount();
        });
    });

    // Update notification count in header
    function updateNotificationCount() {
        var unreadCount = $('.notification-item.unread').length;
        $('.notification-count').text(unreadCount);
        if (unreadCount === 0) {
            $('.notification-count').hide();
        } else {
            $('.notification-count').show();
        }
    }
});
</script>  *@